#Eureka
eureka.client.service-url.defaultZone=http://eureka-server:${EUREKA_PORT}/eureka/
eureka.instance.prefer-ip-address=true

#Postgres
spring.datasource.url=jdbc:postgresql://postgres:${POSTGRES_PORT}/auth-service
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=public

#Kafka
spring.kafka.bootstrapServers=kafka:${KAFKA_PORT}

#KafkaProducer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.producer.topicNameCreateLike=post-event-create-like
spring.kafka.producer.topicNameCreateComment=post-event-create-comment

#Prometheus
management.endpoints.web.exposure.include[0]=health
management.endpoints.web.exposure.include[1]=prometheus
management.metrics.tags.application=post-service

#S3
s3-load-image-starter.provider=${S3_PROVIDER}
s3-load-image-starter.expiration-url-in-minutes=100
s3-load-image-starter.endpoint=http://minio:${S3_PORT}
s3-load-image-starter.access-key=${S3_ACCESS_KEY}
s3-load-image-starter.secret-key=${S3_SECRET_KEY}
s3-load-image-starter.bucket-name=images-post